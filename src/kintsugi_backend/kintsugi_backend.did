type Result = variant { Ok : null; Err : text };

type Report = record {
  id : nat;
  incident_type : text;
  description : text;
  date : text;
  location : text;
  status : opt text;
  comments : vec text; // Vector of comments
  evidence : opt vec text; // Changed to a vector of optional text for multiple evidence items
  flagged : bool;
  escalated_to_dao : bool;
  priority : text; // String-based priority values like "High", "Medium", "Low"
};

type Group = record {
    group_id : nat; // Changed to group_id for clarity
    name : text;
    description : text; 
    location : text; // Location field added for the group
    avatar_url : opt text; // Optional avatar URL for the group
    language : opt text; // Optional language setting
    privacy_setting : text; // Privacy setting for the group
    guidelines : opt text; // Optional guidelines for the group
    created_date : text; // Date when the group was created
    last_active : text; // Last active date of the group
    is_active : bool; // Indicates if the group is active
    member_count : nat; // Number of members in the group
    members : vec principal; // Vector of member principals
    events : vec text; // Events associated with the group
};

type Proposal = record {
    proposal_id : nat; // Changed to proposal_id for clarity
    description : text;
    votes_for : nat;
    votes_against : nat;
    group_id : nat; // Reference to the associated group ID
    proposer : principal; // Proposer as a principal type
    created_date : text; // Date when the proposal was created
    status : ProposalStatus; // Changed to ProposalStatus type
    rationale : opt text; // Optional rationale for the proposal
};

type ProposalStatus = variant {
    Pending;
    Approved;
    Rejected;
};

service : {
  create_report : (text, text, text, text, text, opt vec text) -> (nat); // Added priority as text
  get_report_handler : (nat) -> (opt Report);           
  fetch_reports_handler : () -> (vec Report);           
  update_report : (nat, text, text, text, text, opt text, vec text, opt vec text, opt text) -> (Result); // Updated to match function signature
  delete_report : (nat) -> (Result);                    
  update_status : (nat, text) -> (Result);              
  add_comment : (nat, vec text) -> (Result); // Vector of comments
  update_evidence_handler : (nat, vec text) -> (Result); // Allow multiple pieces of evidence
  flag_report : (nat) -> (Result);              
  escalate_to_dao : (nat) -> (Result);   
  
  create_group : (text, text, text, text, opt text) -> (nat); // Handler for group creation
  fetch_groups : () -> (vec Group); // Method to fetch all groups
  get_group : (nat) -> (opt Group); // Fetch a specific group by ID
  update_group : (nat, text, text) -> (Result); // Update group details
  delete_group : (nat) -> (Result); // Delete a specific group
  
  submit_proposal : (nat, text) -> (nat); // Submit a proposal to a group
  fetch_proposals : () -> (vec Proposal); // Method to fetch all proposals
  get_proposal : (nat) -> (opt Proposal); // Fetch a specific proposal by ID
  delete_proposal : (nat) -> (Result); // Delete a specific proposal
  vote_on_proposal : (nat, bool) -> (Result); // Vote on a proposal
  update_proposal_status_handler : (nat, ProposalStatus, opt text) -> (Result); // Update proposal status
  add_proposal_comment_handler : (nat, nat, text) -> (Result); // Add comment to a proposal
};
